[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "friendli-client"
version = "2.0.0a2"
description = "Friendli Suite Client"
authors = [
    {name = "FriendliAI teams", email = "eng@friendli.ai"},
]
dependencies = [
    "typer>=0.12.3",
    "rich>=13.7.1",
    "pydantic[email]>=2.8.2",
    "httpx[http2]<1.0.0,>=0.24.1",
    "trogon>=0.5.0",
    "keyring>=25.2.1",
    "questionary>=2.0.1",
    "graphql-core>=3.2.3",
    "websockets>=12.0",
]
requires-python = "<3.13,>=3.8.1"
readme = "README.md"
license = {text = "Apache-2.0"}
keywords = ["generative-ai", "serving", "llm", "inference", "finetuning"]

[project.urls]
homepage = "https://friendli.ai/"
repository = "https://github.com/friendliai/friendli-client"
documentation = "https://docs.friendli.ai/"

[project.scripts]
friendli = "friendli.cli.app:app"

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = [
]
test = [
    "pytest>=7.2.0",
    "pytest-cov>=4.0.0",
    "coverage[toml]>=6.4.3",
    "pytest-describe>=2.0.1",
    "pytest-sugar>=0.9.6",
]
lint = [
    "black>=22.12.0", 
    "mypy>=1.0", 
    "ruff>=0.0.246", 
    "pytest>=7.2.0", 
    "typing-extensions>=4.12.2",
]

[tool.black]
line-length = 88
target-version = ["py311"]

[tool.ruff]
# Enable Pyflakes `E` and `F` codes by default.
select = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "D",
  "YTT",
  "ANN",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "C4",
  "DTZ",
  "T10",
  "EM",
  "EXE",
  "ISC",
  "ICN",
  "G",
  "PIE",
  "T20",
  "PYI",
  "PT",
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SIM",
  "TID",
  "TCH",
  "ARG",
  "PTH",
  "ERA",
  "PGH",
  "PL",
  "TRY",
  "RUF",
]
ignore = [
  "E741",   # Ambiguous variable name, to be removed later
  "E999",   # SyntaxError, ignored due to pyflakes not understanding match case
  "N818",   # Allow non-Error suffix in exception names
  "ANN101", # Don't have to annotate self
  "ANN102", # Don't have to annotate cls
  "B010",   # Allow setattr
  "PIE796", # Enum can use auto
  "PGH003", # TODO: We can turn this one later
  "TID252", # Allow relative imports
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "D",
  "YTT",
  "ANN",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "C4",
  "DTZ",
  "T10",
  "EM",
  "EXE",
  "ISC",
  "ICN",
  "G",
  "PIE",
  "T20",
  "PYI",
  "PT",
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SIM",
  "TID",
  "TCH",
  "ARG",
  "PTH",
  "PGH",
  "PL",
  "TRY",
  "RUF",
]
unfixable = ["ERA"]

# Same as Black.
line-length = 88
target-version = "py311"

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

show-fixes = true
src = ["src", "test"]
task-tags = ["TODO", "FIXME", "XXX"]
extend-exclude = ["src/friendli/graphql"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "TCH001"]
# no documentation and function annotation required for tests
"tests/**/*" = [
  "D",
  "ANN202",
  "ANN001",
  "ANN201",
  "S101",
  "TCH003",
  "FBT001",
  "TCH002",
  "DTZ005",
  "S311",
  "PLR0915", # Too-many-statements
  "PLR2004", # Can assert with magic numbers
]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
  "fastapi.Depends",
  "fastapi.Query",
  "fastapi.Body",
  "fastapi.Header",
  "_common.di.integration.fastapi.inject",
]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.flake8-pytest-style]
raises-extend-require-match-for = ["httpx.HTTPError"]

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]
known-first-party = ["_3rdparty", "pf", "_common", "_datastructure", "_framework", "_testing"]
known-local-folder = ["tests"]
forced-separate = ["tests"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 88

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pylint]
max-args = 7

[tool.mypy]
check_untyped_defs = true
ignore_missing_imports = true
namespace_packages = true
fast_module_lookup = true
explicit_package_bases = true

# https://github.com/python/mypy/issues/4717
# (AJ) Such check should be removed from mypy
disable_error_code = ["type-abstract"]
# strict = true  # FIXME(aj): disabling strict mode due to lack of time

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = false
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
addopts = "-rf --cov=src"
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source_pkgs = ["friendli"]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "@overload", "if TYPE_CHECKING:"]
skip_covered = true
sort = "Cover"

