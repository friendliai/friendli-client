/*
 * Copyright (c) 2023-present, FriendliAI Inc. All rights reserved.
 */

syntax = "proto3";

package orca;

message V1CompletionsRequest {
    message TokenSequence {
        repeated int32 tokens = 1;
    }

    enum BeamSearchType {
        DETERMINISTIC = 0; // Use the standard beam search
        STOCHASTIC = 1; // Stochastic beam search by Kool et al. (2019)
        NAIVE_SAMPLING = 2; // Huggingface's beam sampling
    }

    message ResponseFormat {
        enum Type {
            text = 0;
            json_object = 1;
            regex = 2;
        }
        Type type = 1;
        optional string schema = 2;
    }

    optional bool stream = 1;
    optional string model = 2;
    optional string prompt = 3;
    repeated int32 tokens = 4;
    optional int32 timeout_microseconds = 5;
    optional int32 max_tokens = 6;
    optional int32 max_total_tokens = 7;
    optional int32 min_tokens = 8;
    optional int32 min_total_tokens = 9;
    optional int32 n = 10;
    optional int32 num_beams = 11;
    optional float length_penalty = 12;
    optional bool early_stopping = 13;
    optional int32 no_repeat_ngram = 14;
    optional int32 encoder_no_repeat_ngram = 15;
    optional float repetition_penalty = 16;
    optional float encoder_repetition_penalty = 17;
    optional float frequency_penalty = 18;
    optional float presence_penalty = 19;
    optional float temperature = 20;
    optional int32 top_k = 21;
    optional float top_p = 22;

    repeated string stop = 23;
    repeated TokenSequence stop_tokens = 24;

    repeated uint64 seed = 25;

    repeated int32 token_index_to_replace = 26;
    repeated float embedding_to_replace = 27;

    optional BeamSearchType beam_search_type = 28;
    optional bool beam_compat_pre_normalization = 29;
    optional bool beam_compat_no_post_normalization = 30;

    repeated string bad_words = 31;
    repeated TokenSequence bad_word_tokens = 32;

    optional bool include_output_logits = 33;
    optional bool include_output_logprobs = 34;
    repeated int32 forced_output_tokens = 35;

    repeated int32 eos_token = 36;

    optional ResponseFormat response_format = 37;
}

message V1CompletionsResponse {
    enum Event {
        TOKEN_SAMPLED = 0;
        COMPLETE = 1;
    }
    Event event = 1;
    repeated int32 token = 2;
    optional string text = 3;
}

service TextGenerationService {
    rpc Generate(V1CompletionsRequest) returns (stream V1CompletionsResponse) {}
}
